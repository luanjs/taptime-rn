/*! @license Firebase v4.3.1
Build: rev-b4fe95f
Terms: https://firebase.google.com/terms/ */

'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.resolveDeferredValueSnapshot = exports.resolveDeferredValueTree = exports.resolveDeferredValue = exports.generateWithValues = undefined;

var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) {
    return typeof obj;
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
};

var _assert = require('../../../utils/assert');

var _Path = require('./Path');

var _SparseSnapshotTree = require('../SparseSnapshotTree');

var _LeafNode = require('../snap/LeafNode');

var _nodeFromJSON = require('../snap/nodeFromJSON');

var _PriorityIndex = require('../snap/indexes/PriorityIndex');

var generateWithValues = exports.generateWithValues = function generateWithValues(values) {
    values = values || {};
    values['timestamp'] = values['timestamp'] || new Date().getTime();
    return values;
};

var resolveDeferredValue = exports.resolveDeferredValue = function resolveDeferredValue(value, serverValues) {
    if (!value || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {
        return value;
    } else {
        (0, _assert.assert)('.sv' in value, 'Unexpected leaf node or priority contents');
        return serverValues[value['.sv']];
    }
};

var resolveDeferredValueTree = exports.resolveDeferredValueTree = function resolveDeferredValueTree(tree, serverValues) {
    var resolvedTree = new _SparseSnapshotTree.SparseSnapshotTree();
    tree.forEachTree(new _Path.Path(''), function (path, node) {
        resolvedTree.remember(path, resolveDeferredValueSnapshot(node, serverValues));
    });
    return resolvedTree;
};

var resolveDeferredValueSnapshot = exports.resolveDeferredValueSnapshot = function resolveDeferredValueSnapshot(node, serverValues) {
    var rawPri = node.getPriority().val();
    var priority = resolveDeferredValue(rawPri, serverValues);
    var newNode;
    if (node.isLeafNode()) {
        var leafNode = node;
        var value = resolveDeferredValue(leafNode.getValue(), serverValues);
        if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {
            return new _LeafNode.LeafNode(value, (0, _nodeFromJSON.nodeFromJSON)(priority));
        } else {
            return node;
        }
    } else {
        var childrenNode = node;
        newNode = childrenNode;
        if (priority !== childrenNode.getPriority().val()) {
            newNode = newNode.updatePriority(new _LeafNode.LeafNode(priority));
        }
        childrenNode.forEachChild(_PriorityIndex.PRIORITY_INDEX, function (childName, childNode) {
            var newChildNode = resolveDeferredValueSnapshot(childNode, serverValues);
            if (newChildNode !== childNode) {
                newNode = newNode.updateImmediateChild(childName, newChildNode);
            }
        });
        return newNode;
    }
};