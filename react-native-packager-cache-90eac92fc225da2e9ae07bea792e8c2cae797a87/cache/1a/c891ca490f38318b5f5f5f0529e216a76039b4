/*! @license Firebase v4.3.1
Build: rev-b4fe95f
Terms: https://firebase.google.com/terms/ */

'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RepoInfo = undefined;

var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) {
    return typeof obj;
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
};

var _assert = require('../../utils/assert');

var _obj = require('../../utils/obj');

var _storage = require('./storage/storage');

var _Constants = require('../realtime/Constants');

var RepoInfo = function () {
    function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey) {
        if (persistenceKey === void 0) {
            persistenceKey = '';
        }
        this.secure = secure;
        this.namespace = namespace;
        this.webSocketOnly = webSocketOnly;
        this.persistenceKey = persistenceKey;
        this.host = host.toLowerCase();
        this.domain = this.host.substr(this.host.indexOf('.') + 1);
        this.internalHost = _storage.PersistentStorage.get('host:' + host) || this.host;
    }
    RepoInfo.prototype.needsQueryParam = function () {
        return this.host !== this.internalHost;
    };
    RepoInfo.prototype.isCacheableHost = function () {
        return this.internalHost.substr(0, 2) === 's-';
    };
    RepoInfo.prototype.isDemoHost = function () {
        return this.domain === 'firebaseio-demo.com';
    };
    RepoInfo.prototype.isCustomHost = function () {
        return this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com';
    };
    RepoInfo.prototype.updateHost = function (newHost) {
        if (newHost !== this.internalHost) {
            this.internalHost = newHost;
            if (this.isCacheableHost()) {
                _storage.PersistentStorage.set('host:' + this.host, this.internalHost);
            }
        }
    };

    RepoInfo.prototype.connectionURL = function (type, params) {
        (0, _assert.assert)(typeof type === 'string', 'typeof type must == string');
        (0, _assert.assert)((typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object', 'typeof params must == object');
        var connURL;
        if (type === _Constants.WEBSOCKET) {
            connURL = (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';
        } else if (type === _Constants.LONG_POLLING) {
            connURL = (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';
        } else {
            throw new Error('Unknown connection type: ' + type);
        }
        if (this.needsQueryParam()) {
            params['ns'] = this.namespace;
        }
        var pairs = [];
        (0, _obj.forEach)(params, function (key, value) {
            pairs.push(key + '=' + value);
        });
        return connURL + pairs.join('&');
    };

    RepoInfo.prototype.toString = function () {
        var str = this.toURLString();
        if (this.persistenceKey) {
            str += '<' + this.persistenceKey + '>';
        }
        return str;
    };

    RepoInfo.prototype.toURLString = function () {
        return (this.secure ? 'https://' : 'http://') + this.host;
    };
    return RepoInfo;
}();
exports.RepoInfo = RepoInfo;